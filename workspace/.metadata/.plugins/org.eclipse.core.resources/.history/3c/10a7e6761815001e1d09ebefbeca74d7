package rs.ac.bg.etf.pp1;

import rs.etf.pp1.symboltable.concepts.Obj;
import rs.etf.pp1.symboltable.concepts.Struct;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

public class DumpSymbolTableVisitorExtended extends DumpSymbolTableVisitor {

	@Override
	public void visitObjNode(Obj objToVisit) {
		// output.append("[");

		switch (objToVisit.getKind()) {
		case Obj.Con:
			output.append("Con: ");
			break;
		case Obj.Var:
			output.append("Var: ");
			break;
		case Obj.Type:
			output.append("Type: ");
			break;
		case Obj.Meth:
			output.append("Meth: ");
			break;
		case Obj.Fld:
			output.append("Mtx: ");
			break;
		case Obj.Prog:
			output.append("Prog: ");
			break;
		}

		
		output.append("ime-");
		output.append(objToVisit.getName());
		output.append(": ");

		output.append("tip-");
		if ((Obj.Var == objToVisit.getKind())
				&& "this".equalsIgnoreCase(objToVisit.getName()))
			output.append("");
		else
			objToVisit.getType().accept(this);

		output.append(", ");
		output.append("adr-");
		output.append(objToVisit.getAdr());
		output.append(", ");
		output.append("lvl-");
		output.append(objToVisit.getLevel() + " ");

		if (objToVisit.getKind() == Obj.Prog
				|| objToVisit.getKind() == Obj.Meth) {
			output.append("\n");
			nextIndentationLevel();
		}

		if (objToVisit.getType().getKind() == Struct.Enum) {
			output.append("\n");
			nextIndentationLevel();
		}

		for (Obj o : objToVisit.getLocalSymbols()) {
			output.append(currentIndent.toString());
			o.accept(this);
			output.append("\n");
		}

		if (objToVisit.getKind() == Obj.Meth) {
			for (Obj o : objToVisit.getType().getMembers()) {
				output.append(currentIndent.toString());
				o.accept(this);
				output.append("\n");
			}
		}

		if (objToVisit.getKind() == Obj.Prog
				|| objToVisit.getKind() == Obj.Meth) {
			previousIndentationLevel();
		}

		if (objToVisit.getType().getKind() == Struct.Enum) {
			previousIndentationLevel();
		}

	}

	@Override
	public void visitStructNode(Struct structToVisit) {
		switch (structToVisit.getKind()) {
		case Struct.Class:
			output.append("void");
			break;
		case Struct.Int:
			output.append("int");
			break;
		case Struct.Char:
			output.append("char");
			break;
		case Struct.Bool:
			output.append("bool");
			break;
		case Struct.Array:
			output.append("Arr of ");

			switch (structToVisit.getElemType().getKind()) {
			case Struct.None:
				output.append("notype");
				break;
			case Struct.Int:
				output.append("int");
				break;
			case Struct.Char:
				output.append("char");
				break;
			case Struct.Bool:
				output.append("bool");
				break;
			case Struct.Array:
				output.append("Arr of ");

				switch (structToVisit.getElemType().getElemType().getKind()) {
				case Struct.None:
					output.append("notype");
					break;
				case Struct.Int:
					output.append("int");
					break;
				case Struct.Char:
					output.append("char");
					break;
				case Struct.Bool:
					output.append("bool");
					break;
				}
				break;
			}
			break;
		}
	}

}