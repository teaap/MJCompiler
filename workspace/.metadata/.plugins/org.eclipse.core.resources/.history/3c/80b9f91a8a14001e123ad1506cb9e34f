package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, CONST, LBRACKET, RBRACKET, LPAREN, RPAREN, MULTI, MINUS;
terminal PLUS, DIV, PLUSPLUS, EQUALEQUAL, NOTEQUAL, MOD, GREATER, LESS, GREEQ, LESSEQ;
terminal AND, OR, POINT, EQGRE;
terminal ELSE, IF, NEW, WHILE, READ, CONTINUE, MAP, MINUSMINUS, VOID, PRINT, COLON, CLASS, EXTENDS;
terminal String IDENT;
terminal EQUAL, SEMI, RETURN, BREAK, COMMA, TARABA;
terminal Integer NUMBER;
terminal Boolean BOOL_CONST;
terminal Character CHAR_CONST;
nonterminal Assignop, ActPars, IfNoElse, ActParsL, RPARENStart;
nonterminal ConstVarDeclList, MethodDeclList, ConstDecl, VarDecl, NumCharBoolList, BracketList, ANDStart, ORStart;
nonterminal VarDeclList, StatementList, BracketListForm, FormPars, IfCondition, IFStart;
nonterminal Relop, Label, VarDeclL, ELSEStart, WhileCondition, EQGREStart, DsignatorAssign;
nonterminal Mulop, Addop, FormParsList, FormParamDeclVar, WHILEStart, BrackDesig;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Statement, NumCharBool, MethodDeclReturn, MethodDecl, Designator, FactorFunc, DesigIdent;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodReturnType, Condition, CondTerm, Factor, Expr, Term, CondFact, DesignatorStatement;

precedence left ELSE;


Program ::= (Program) PROG ProgName:p ConstVarDeclList LBRACE MethodDeclList RBRACE;
ProgName ::= (ProgName) IDENT:progName;

ConstVarDeclList ::= (ConstVardecl) ConstVarDeclList ConstDecl
					| (ConstNoVar) ConstVarDeclList VarDecl
					| (NoConstVar) /* epsilon */
;

Type ::= (Type) IDENT:typeName;

ConstDecl ::= (ConstDecl) CONST Type:constType NumCharBool NumCharBoolList SEMI
;

NumCharBool ::= (NumConst) IDENT:numName EQUAL NUMBER:numValue
			  | (CharConst) IDENT:charName EQUAL CHAR_CONST:charValue
			  | (BoolConst) IDENT:boolName EQUAL BOOL_CONST:boolValue
;

NumCharBoolList ::=(NumList) NumCharBoolList COMMA NumCharBool
				| (NoList) /* epsilon */
;

VarDecl ::= (VarDecl) Type:varType VarDeclL BracketList SEMI
;

VarDeclL ::= (VarDeclNo) IDENT:varNoBracket
			| (VarDeclGOne) IDENT:varOneBracket LBRACKET RBRACKET 
			| (VarDeclGTwo) IDENT:varTwoBracket LBRACKET RBRACKET LBRACKET RBRACKET
			| (ErrorVarDecl) error:l
		{: parser.report_error("Sintaksna greska! Izvrsen oporavak globalne promenljjive na liniji " + lleft, null); :}		
;

FormParamDeclVar ::= (FormParamDeclVarNo) IDENT:nameNoBracket
			| (FormParamDeclVarOne) IDENT:nameOneBracket LBRACKET RBRACKET 
			| (FormParamDeclVarTwo) IDENT:nameTwoBracket LBRACKET RBRACKET LBRACKET RBRACKET
			| (ErrorFormParams) error:l
	    {: parser.report_error("Sintaksna greska! Izvrsen oporavak od greske u formalnim parametrima na liniji " + lleft, null); :}
;

BracketList ::= (BrackListOne) BracketList COMMA VarDeclL
			| (NoBrackList) /* epsilon */
;

MethodDeclList ::= (MethodList) MethodDeclList MethodDecl
			| (NoMethodList) /* epsilon */
;

MethodDecl ::= (MethodDeclType) MethodDeclReturn FormParsList VarDeclList LBRACE StatementList RBRACE
;

VarDeclList ::= (VarList) VarDeclList VarDecl
			| (NoVarL) /* epsilon */
;

MethodDeclReturn ::= (MethodDeclReturn) MethodReturnType IDENT:nameFuncT
;

MethodReturnType ::= (MethodReturnTypeType) Type
				  |  (MethodReturnTypeVoid) VOID
;

FormParsList ::= (FormParsListParams) LPAREN FormPars RPAREN
			   | (FormParsListNoParams) LPAREN RPAREN
;

FormPars ::= (FormPars) Type FormParamDeclVar BracketListForm
;

BracketListForm ::= (BrackListForm) BracketListForm COMMA Type FormParamDeclVar
			| (NoBrackListForm) /* epsilon */
;

WHILEStart ::= (WHILEStart) WHILE
;

Statement ::= (DesignatorStatementOne) DesignatorStatement 
			| (StatementIf) IFStart LPAREN IfCondition RPAREN Statement IfNoElse
			| (StatementIfElse) IFStart LPAREN IfCondition RPAREN Statement ELSEStart Statement
			| (StatementWhile) WHILEStart LPAREN WhileCondition RPAREN Statement
			| (StatementBreak) BREAK SEMI
			| (StatementContinue) CONTINUE SEMI
			| (StatementReturn) RETURN SEMI
			| (StatementRetExp) RETURN Expr SEMI
			| (StatementRead) READ LPAREN Designator RPAREN SEMI
			| (StatementExpr) PRINT LPAREN Expr RPAREN SEMI			      
			| (StatementPrint) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			| (StatementMap) Designator EQUAL Designator POINT MAP LPAREN IDENT:nameIdent EQGREStart Expr RPARENStart SEMI
			| (StatementListBrace) LBRACE StatementList RBRACE
;

RPARENStart ::= (RPARENStart) RPAREN;

EQGREStart ::= (EQGREStart) EQGRE;

ELSEStart ::= (ELSEStart) ELSE;

IFStart ::= (IFStart) IF;

IfNoElse ::= (IfNoElse)  /* epsilon */;
			
StatementList ::= (StatementListYes) StatementList Statement
			| (NoStmt) /* epsilon */
;

DesignatorStatement ::= (DesignatorAsExpr) DsignatorAssign
					| (DesignatorFuncCall) FactorFunc LPAREN ActParsL RPAREN SEMI
					| (DesignatorPlusPlus) Designator PLUSPLUS SEMI
					| (DesignatorMinusMinus) Designator MINUSMINUS SEMI
;

DsignatorAssign ::= (DsignatorAss) Designator EQUAL Expr SEMI
				| (DesignatorExprError) error:l
		{: parser.report_error("Sintaksna greska! Izvrsen oporavak posle naredbe dodele na liniji " + lleft, null); :}
;

WhileCondition ::= (WhileCondition) Condition;

ActPars ::= (ActParsOne) Expr
			| (ListExpr) ActPars COMMA Expr
;

IfCondition ::= (IfCond) Condition
				|
				(ErrorIfCond) error:l 
	{: parser.report_error("Sintaksna greska! Izvrsen oporavak zbog greske u uslovu na liniji " + lleft, null); :}
;

Condition ::= (CondTermOne) CondTerm
			| (ListCondTerm) Condition ORStart CondTerm
;

ORStart ::= (ORStart) OR;

ANDStart ::=(ANDStart) AND;

CondTerm ::= (CondFactOne) CondFact 
			| (CondFactList) CondTerm ANDStart CondFact
;

CondFact ::= (CondFactExpr) Expr
			| (CondFactRelop) Expr Relop Expr
;
 
Expr ::= (ExprMinus) MINUS Term
		| (ExprAddop) Expr Addop Term
		| (ExprNoMinus) Term
		| (Taraba) TARABA IDENT:name LBRACKET Expr RBRACKET
;

Term ::= (TermFactor) Factor
		| (TermFactorMulop) Term Mulop Factor
;

Factor ::= (FactorDesignator) Designator 
		| (FactorFuncCall) FactorFunc LPAREN ActParsL RPAREN
		| (FactorNumConst) NUMBER
		| (FactorCharConst) CHAR_CONST
		| (FactorBoolConst) BOOL_CONST
		| (FactorNewBracket) NEW Type LBRACKET Expr RBRACKET
		| (FactorExpr) LPAREN Expr RPAREN
		| (FactorExprExpr) NEW Type LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET
;

FactorFunc ::= (FactorFunc) Designator
;

ActParsL ::= (ActParsLista) ActPars
			| (NoActParsL) /* epsilon */
;

Designator ::= (NoDesig) DesigIdent
			| (DesigError) DesigIdent LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET BrackDesig
			| (DesigExprOne) DesigIdent LBRACKET Expr RBRACKET
			| (DesigExprDouble) DesigIdent LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET
;

DesigIdent ::= (DesigIdent) IDENT:nameDesig
;

BrackDesig ::= (BrackDesigList) BrackDesig LBRACKET Expr RBRACKET
			| (NoBrackDesig) /* epsilon */
;

Label ::= (LabelIdent) IDENT
;

Assignop ::= (Assignop) EQUAL
;

Relop ::= (RelopEqual) EQUALEQUAL
		| (RelopNoEqual) NOTEQUAL
		| (RelopGre) GREATER
		| (RelopGeEq) GREEQ
		| (RelopLess) LESS
		| (RelopLessEq) LESSEQ
;

Addop ::= (AddopPlus) PLUS
		| (AddopMinus) MINUS
;

Mulop ::= (MulopMulti) MULTI
		| (MulopDiv) DIV
		| (MulopMod) MOD
; 
